{"version":3,"sources":["components/likes.js","components/slide.js","data/data.js","container/slider.js","App.js","serviceWorker.js","index.js"],"names":["Likes","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","likes","countLikes","setState","e","name","react_default","a","createElement","className","class","onClick","countLikesButton","bind","countDislikes","Component","Card","image","tracks","index","id","concat","src","alt","map","list","console","log","playcount","data","properties","Slider","gotToPrevSlide","newIndex","property","gotToNextSlide","dataTracks","_this2","values","forEach","artist","artistList","fetch","then","response","json","artistListData","artistData","push","track","loadData","_this3","_this$state","disabled","length","style","transform","propertys","slide","key","App","slider","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4a26a04.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Likes extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            likes: ''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const { countLikes } = this.props;\r\n        this.setState({ likes: countLikes })\r\n      }\r\n    \r\n      countLikesButton(e){\r\n        this.setState({ likes: this.state.likes + 1 })\r\n      }\r\n    \r\n      countDislikes(e){\r\n\r\n        if (this.state.likes >= 0) {\r\n          this.setState({ likes: this.state.likes - 1 });\r\n        }else{\r\n          this.setState({ likes: 0 });\r\n        }\r\n      }\r\n    render(){\r\n        const {name} = this.props\r\n        return (\r\n            <div>\r\n                <div className=\"opcion1\"><h5>{name}</h5></div>\r\n                <div className=\"opcion2\"><i class=\"far fa-thumbs-up\" onClick={this.countLikesButton.bind(this)}></i></div>\r\n                <div className=\"opcion2\"><i class=\"far fa-thumbs-down\" onClick={this.countDislikes.bind(this)}></i></div>\r\n                <div className=\"opcion3\"><h5>{this.state.likes}</h5></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Likes;","import React from 'react';\r\nimport Likes from './likes.js'\r\nconst Card = (props) =>{\r\n    const{name,image,tracks,index}=props\r\n    return (\r\n        <div  id={`card-${index}`} className='card'>\r\n             <img src={image} alt={name}/>\r\n             <div className='details'>\r\n                <p>{name}</p>\r\n                <div>\r\n                    {\r\n                    tracks.map(list=>{\r\n                        console.log(list);\r\n                        \r\n                        return(\r\n                            <div className=\"opciones\">\r\n                                <Likes name={list.name} countLikes={list.playcount}/>\r\n                            </div>                          \r\n                        )\r\n                    })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n\r\n","const data={\r\n    \"properties\":[\r\n        {\r\n            \"id\": \"001\",\r\n            \"index\":0,\r\n            \"name\":\"Martin Garrix\",\r\n            \"image\":\"https://lastfm-img2.akamaized.net/i/u/300x300/5cd16868a1e01103fcc98afb52ffb9e8.png\",\r\n        },\r\n        {\r\n            \"id\": \"002\",\r\n            \"index\":1,\r\n            \"name\":\"The chainsmokers\",\r\n            \"image\":\" https://lastfm-img2.akamaized.net/i/u/300x300/67f4c2d79f39a19225a80d3b0f158dc1.png \" , \r\n        },\r\n        {\r\n            \"id\": \"003\",\r\n            \"index\":2,\r\n            \"name\":\"Marshmallow\",\r\n            \"image\":\"https://lastfm-img2.akamaized.net/i/u/300x300/927448a2d2574c6a92662f6b6f807837.png\",\r\n        },\r\n        {\r\n            \"id\": \"004\",\r\n            \"index\":3,\r\n            \"name\":\"Hardwell\",\r\n            \"image\":\"https://lastfm-img2.akamaized.net/i/u/300x300/7cff660d8ca62eb47c5efb695ff1fb8b.png\",\r\n        },\r\n        {\r\n            \"id\": \"005\",\r\n            \"index\":4,\r\n            \"name\":\"Avicii\",\r\n            \"image\":\"https://lastfm-img2.akamaized.net/i/u/300x300/843505d2f55a92a7e39bf17ce938d340.png\",\r\n        },\r\n        {\r\n            \"id\": \"006\",\r\n            \"index\":5,\r\n            \"name\":\"Zedd\",\r\n            \"image\":\"https://lastfm-img2.akamaized.net/i/u/300x300/2cc89f54bc6d977808af2b2c804541ab.png\",\r\n        },\r\n        {\r\n            \"id\": \"007\",\r\n            \"index\":6,\r\n            \"name\":\"Skrillex\",\r\n            \"image\":\"https://lastfm-img2.akamaized.net/i/u/300x300/e14d46b82b3f4907a62c1e184c05fb28.png\",\r\n        }\r\n    ]\r\n}\r\nexport default data;","import React, {Component} from 'react';\r\nimport Card from '../components/slide';\r\n// import LeftArrow from '../components/left';\r\n// import RigthArrow from '../components/rigth';\r\nimport data from '../data/data';\r\n\r\nimport './Slider.css'\r\n\r\n\r\nclass Slider extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            dataTracks:[],\r\n            properties: data.properties,\r\n            property: data.properties[1]\r\n        }\r\n    }\r\n\r\n    loadData(){\r\n        let { dataTracks } = this.state;\r\n              Object.values(data).forEach(artist=>{          \r\n                artist.forEach(artistList =>{   \r\n                    fetch(`http://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=${artistList.name}&api_key=abbfe0feb0cf98ff82ecdbb23d78c656&format=json`)\r\n                    .then (response => response.json())\r\n                    .then (artistListData=>{       \r\n                        Object.values(artistListData).forEach(artistData =>{\r\n                                dataTracks.push({\r\n                                    id:artistList.id,\r\n                                    name:artistList.name,\r\n                                    image:artistList.image,\r\n                                    index:artistList.index,\r\n                                    tracks:artistData.track})\r\n                            this.setState({dataTracks});\r\n                        })\r\n                    })    \r\n                })\r\n              })\r\n        }\r\n\r\n    gotToPrevSlide = () =>{\r\n        const newIndex= this.state.property.index-1;\r\n        this.setState({\r\n            property: data.properties[newIndex]\r\n        })\r\n    }\r\n    gotToNextSlide = () =>{\r\n        const newIndex= this.state.property.index+1;\r\n        this.setState({\r\n            property: data.properties[newIndex]\r\n        })\r\n    }\r\n        \r\n    componentDidMount(){\r\n        this.loadData();\r\n    }\r\n\r\n    render(){\r\n\r\n        const {properties,property}=this.state;\r\n       \r\n        return (\r\n            <div className=\"App\">\r\n                <i className=\"fas fa-arrow-circle-left\" onClick={()=>this.gotToPrevSlide()} disabled={property.index === (data.properties.length-1)}></i>\r\n                <i className=\"fas fa-arrow-circle-right\" onClick={()=>this.gotToNextSlide()} disabled={property.index === 0}></i>\r\n                \r\n                <div className=\"page\">\r\n                   <div className=\"col\">\r\n                    <div className={`cards-slider active-slide-${property.index}`}>\r\n                        <div className='cards-slider-wrapper' style={{'transform':`translateX(-${property.index*(100/properties.length)}%)`}}>\r\n                            {\r\n                                this.state.dataTracks.map(propertys=>{\r\n                                return property.index === propertys.index ?\r\n                                    <Card key={propertys.id} \r\n                                    name={propertys.name} \r\n                                    image={propertys.image}\r\n                                    index={propertys.index}\r\n                                    tracks={propertys.tracks}/>:false\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Slider","import React, { Component } from 'react';\r\nimport Slider from './container/slider';\r\nimport './App.css';\r\nclass App extends Component {\r\n\r\n  render() {   \r\n\r\n    return (\r\n      <div className=\"principal\">\r\n        <header>\r\n          <h3>\r\n            Learn React\r\n          </h3>\r\n        </header>\r\n       <Slider />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}